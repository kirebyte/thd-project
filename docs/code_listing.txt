==== File: cmd/server/main.go ====
package main

import (
	"fmt"

	"github.com/kirebyte/thd-project/internal/logger"
)

func main() {
	fmt.Println("Hello, World!")
	logger.Debug("This is a debug message")
	logger.Info("This is an info message")
}
==== End of File ====

==== File: internal/logger/logger.go ====
package logger

import (
	"fmt"
	"os"
	"strings"
)

type LogLevel int

const (
	DEBUG LogLevel = iota
	INFO
	WARN
	ERROR
)

var currentLevel = INFO

func init() {
	switch strings.ToUpper(os.Getenv("LOG_LEVEL")) {
	case "DEBUG":
		currentLevel = DEBUG
	case "INFO":
		currentLevel = INFO
	case "WARN":
		currentLevel = WARN
	case "ERROR":
		currentLevel = ERROR
	}
}

func Debug(msg string) {
	if currentLevel <= DEBUG {
		logToStderr("[DEBUG] " + msg)
	}
}

func Info(msg string) {
	if currentLevel <= INFO {
		logToStderr("[INFO] " + msg)
	}
}

func Warn(msg string) {
	if currentLevel <= WARN {
		logToStderr("[WARN] " + msg)
	}
}

func Error(msg string) {
	if currentLevel <= ERROR {
		logToStderr("[ERROR] " + msg)
	}
}

func logToStderr(msg string) {
	fmt.Fprintln(os.Stderr, msg)
}
==== End of File ====

==== File: internal/model/car.go ====
package model

type Car struct {
	ID    string `json:"id"`
	Make  string `json:"make"`
	Model string `json:"model"`
	Year  int    `json:"year"`
}
==== End of File ====

==== File: settings/config.go ====
package settings

import (
	"os"
)

// TO-DO, adapt this structure to this project
// DBPath         string `envconfig:"DB_PATH" required:"true"`
// Port           string `envconfig:"CHRONOSYNC_PORT" required:"true"`
// CreationScript string `envconfig:"DB_CREATION_SCRIPT" required:"true"`
type Config struct {
	Port string
}

func Load() Config {
	return Config{
		Port: getEnv("PORT", "8080"),
	}
}

func getEnv(key, fallback string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return fallback
}
==== End of File ====

==== File: service.go ====
package main

import (
	"context"

	"github.com/kirebyte/thd-project/internal/model"
)

type CarService interface {
	GetCar(ctx context.Context, id string) (model.Car, error)
	ListCars(ctx context.Context) ([]model.Car, error)
	CreateCar(ctx context.Context, car model.Car) error
	UpdateCar(ctx context.Context, id string, car model.Car) error
}
==== End of File ====

==== File: repository.go ====
package main

import (
	"context"

	"github.com/kirebyte/thd-project/internal/model"
)

type CarRepository interface {
	FindByID(ctx context.Context, id string) (model.Car, error)
	FindAll(ctx context.Context) ([]model.Car, error)
	Save(ctx context.Context, car model.Car) error
	Update(ctx context.Context, id string, car model.Car) error
}
==== End of File ====

